char* longestPalindrome(char* s) {
    int length = 0, max = 1;
    while (s[length] != '\0')
        length++;

    int dp[length][length];
    memset(dp, 0, sizeof(dp));
    int start = 0, end = 0;
    for (int i = 0; i < length; i++)
        dp[i][i] = 1;
    for (int i = 0; i < length - 1; i++) {
        if (s[i] == s[i + 1]) {
            dp[i][i + 1] = 1;
            start = i;
            end = i + 1;
            max = 2;
        }
    }

    for (int k = 3; k <= length; k++) {
        for (int i = 0; i < length - k + 1; i++) {
            int j = i + k - 1;
            if (dp[i + 1][j - 1] == 1 && s[i] == s[j]) {
                dp[i][j] = 1;
                if (k > max) {
                    start = i;
                    end = j;
                    max = k;
                }
            }
        }
        
    }
    int i = 0;
        while (start <= end) {
            s[i] = s[start];
            start++;
            i++;
        }
    s[i] = '\0';
    return s;
}
